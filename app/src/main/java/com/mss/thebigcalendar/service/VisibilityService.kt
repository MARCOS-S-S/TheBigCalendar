package com.mss.thebigcalendar.service

import android.app.NotificationManager
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.provider.Settings
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.View
import android.view.WindowManager
import android.widget.Button
import android.widget.TextView
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import com.mss.thebigcalendar.R
import com.mss.thebigcalendar.data.model.Activity
import com.mss.thebigcalendar.data.model.VisibilityLevel
import com.mss.thebigcalendar.data.model.ActivityType
import com.mss.thebigcalendar.data.model.NotificationSettings
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.format.DateTimeFormatter
import java.util.Locale

/**
 * Servi√ßo para gerenciar a visibilidade das atividades baseado no n√≠vel configurado
 */
class VisibilityService(private val context: Context) {

    companion object {
        private const val TAG = "VisibilityService"
        private const val VISIBILITY_CHANNEL_ID = "visibility_alerts"
        private const val VISIBILITY_CHANNEL_NAME = "Alertas de Visibilidade"
        private const val VISIBILITY_CHANNEL_DESCRIPTION = "Alertas para atividades com alta visibilidade"
    }

    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    private val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager

    init {
        createVisibilityNotificationChannel()
    }

    /**
     * Cria o canal de notifica√ß√£o para alertas de visibilidade
     */
    private fun createVisibilityNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = android.app.NotificationChannel(
                VISIBILITY_CHANNEL_ID,
                VISIBILITY_CHANNEL_NAME,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = VISIBILITY_CHANNEL_DESCRIPTION
                enableVibration(true)
                enableLights(true)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }

    /**
     * Verifica se o app tem permiss√£o para sobrepor outros apps
     */
    fun hasOverlayPermission(): Boolean {
        val hasPermission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            Settings.canDrawOverlays(context)
        } else {
            true // Para vers√µes anteriores ao Android 6.0
        }
        
        Log.d(TAG, "üîç Verificando permiss√£o de sobreposi√ß√£o: $hasPermission")
        Log.d(TAG, "üì± Vers√£o do Android: ${Build.VERSION.SDK_INT}")
        Log.d(TAG, "üì± Context: ${context.packageName}")
        
        return hasPermission
    }

    /**
     * Solicita permiss√£o para sobrepor outros apps
     */
    fun requestOverlayPermission(): Intent {
        return Intent(
            Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
            Uri.parse("package:${context.packageName}")
        )
    }

    /**
     * Exibe o alerta baseado no n√≠vel de visibilidade da atividade
     */
    fun showVisibilityAlert(activity: Activity) {
        Log.d(TAG, "üîÑ showVisibilityAlert chamado para: ${activity.title} com visibilidade: ${activity.visibility}")
        val hasPermission = hasOverlayPermission()
        Log.d(TAG, "üîë Permiss√£o de sobreposi√ß√£o: $hasPermission")
        
        when (activity.visibility) {
            VisibilityLevel.LOW -> {
                // Apenas notifica√ß√£o padr√£o (j√° gerenciada pelo NotificationService)
                Log.d(TAG, "üì± Visibilidade baixa: apenas notifica√ß√£o padr√£o")
            }
            VisibilityLevel.MEDIUM -> {
                if (hasPermission) {
                    Log.d(TAG, "üü° Exibindo alerta de visibilidade m√©dia")
                    showMediumVisibilityAlert(activity)
                } else {
                    Log.d(TAG, "‚ö†Ô∏è Sem permiss√£o para visibilidade m√©dia, usando fallback")
                    // Fallback para notifica√ß√£o se n√£o tiver permiss√£o
                    showFallbackNotification(activity, "Alerta M√©dio")
                }
            }
            VisibilityLevel.HIGH -> {
                if (hasPermission) {
                    Log.d(TAG, "üî¥ Exibindo alerta de visibilidade alta")
                    showHighVisibilityAlert(activity)
                } else {
                    Log.d(TAG, "‚ö†Ô∏è Sem permiss√£o para visibilidade alta, usando fallback")
                    // Fallback para notifica√ß√£o se n√£o tiver permiss√£o
                    showFallbackNotification(activity, "Alerta Alto")
                }
            }
        }
    }

    /**
     * Exibe alerta de visibilidade m√©dia (banner na parte inferior)
     */
    private fun showMediumVisibilityAlert(activity: Activity) {
        try {
            // ‚úÖ Verificar se estamos na Main thread
            if (android.os.Looper.myLooper() != android.os.Looper.getMainLooper()) {
                Log.w(TAG, "‚ö†Ô∏è N√£o estamos na Main thread, mudando para Main thread")
                // Usar Handler para executar na Main thread
                android.os.Handler(android.os.Looper.getMainLooper()).post {
                    showMediumVisibilityAlert(activity)
                }
                return
            }
            
            Log.d(TAG, "‚úÖ Estamos na Main thread, continuando...")
            
            // Criar layout para o banner
            val layoutInflater = LayoutInflater.from(context)
            val bannerView = layoutInflater.inflate(R.layout.visibility_banner_medium, null)

            // Configurar texto do banner
            val titleText = bannerView.findViewById<TextView>(R.id.banner_title)
            val timeText = bannerView.findViewById<TextView>(R.id.banner_time)
            
            titleText.text = activity.title
            timeText.text = formatActivityTime(activity)

            // Configurar par√¢metros da janela
            val layoutParams = WindowManager.LayoutParams().apply {
                type = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
                } else {
                    WindowManager.LayoutParams.TYPE_PHONE
                }
                flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
                        WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL or
                        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                width = WindowManager.LayoutParams.MATCH_PARENT
                height = WindowManager.LayoutParams.WRAP_CONTENT
                gravity = Gravity.BOTTOM
                y = 100 // Margem do fundo
            }

            // Adicionar banner √† tela
            windowManager.addView(bannerView, layoutParams)

            // Remover banner ap√≥s 5 segundos
            bannerView.postDelayed({
                try {
                    windowManager.removeView(bannerView)
                } catch (e: Exception) {
                    Log.w(TAG, "Erro ao remover banner: ${e.message}")
                }
            }, 5000)

            Log.d(TAG, "Banner de visibilidade m√©dia exibido para: ${activity.title}")

        } catch (e: Exception) {
            Log.e(TAG, "Erro ao exibir banner de visibilidade m√©dia", e)
            // Fallback para notifica√ß√£o
            showFallbackNotification(activity, "Alerta M√©dio")
        }
    }

    /**
     * Exibe alerta de visibilidade alta (tela inteira)
     */
    private fun showHighVisibilityAlert(activity: Activity) {
        try {
            Log.d(TAG, "üîÑ Iniciando exibi√ß√£o de alerta de visibilidade alta para: ${activity.title}")
            
            // ‚úÖ Verificar se estamos na Main thread
            if (android.os.Looper.myLooper() != android.os.Looper.getMainLooper()) {
                Log.w(TAG, "‚ö†Ô∏è N√£o estamos na Main thread, mudando para Main thread")
                // Usar Handler para executar na Main thread
                android.os.Handler(android.os.Looper.getMainLooper()).post {
                    showHighVisibilityAlert(activity)
                }
                return
            }
            
            Log.d(TAG, "‚úÖ Estamos na Main thread, continuando...")
            
            // Criar layout para o alerta de tela inteira
            val layoutInflater = LayoutInflater.from(context)
            val fullScreenView = layoutInflater.inflate(R.layout.visibility_alert_high, null)
            Log.d(TAG, "‚úÖ Layout inflado com sucesso")

            // Configurar texto do alerta
            val titleText = fullScreenView.findViewById<TextView>(R.id.alert_title)
            val descriptionText = fullScreenView.findViewById<TextView>(R.id.alert_description)
            val timeText = fullScreenView.findViewById<TextView>(R.id.alert_time)
            
            titleText.text = activity.title
            descriptionText.text = activity.description ?: "Sem descri√ß√£o"
            timeText.text = formatActivityTime(activity)
            Log.d(TAG, "‚úÖ Textos configurados: t√≠tulo='${activity.title}', descri√ß√£o='${activity.description}', hor√°rio='${formatActivityTime(activity)}'")

            // Configurar par√¢metros da janela
            val layoutParams = WindowManager.LayoutParams().apply {
                type = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
                } else {
                    WindowManager.LayoutParams.TYPE_SYSTEM_ALERT
                }
                flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
                        WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL or
                        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or
                        WindowManager.LayoutParams.FLAG_FULLSCREEN or
                        WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED or
                        WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON or
                        WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
                width = WindowManager.LayoutParams.MATCH_PARENT
                height = WindowManager.LayoutParams.MATCH_PARENT
                gravity = Gravity.CENTER
                systemUiVisibility = View.SYSTEM_UI_FLAG_FULLSCREEN or
                                   View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or
                                   View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
            }
            Log.d(TAG, "‚úÖ Par√¢metros da janela configurados: type=${layoutParams.type}, flags=${layoutParams.flags}")

            // Adicionar alerta √† tela
            Log.d(TAG, "Attempting to add view to window manager. Context: $context")
            windowManager.addView(fullScreenView, layoutParams)
            Log.d(TAG, "‚úÖ Alerta adicionado √† tela com sucesso")

            // Configurar bot√£o Adiar
            val snoozeButton = fullScreenView.findViewById<Button>(R.id.alert_snooze_button)
            snoozeButton.setOnClickListener {
                try {
                    Log.d(TAG, "üîÑ Usu√°rio clicou no bot√£o Adiar")
                    showSnoozeOptionsDialog(activity, fullScreenView)
                } catch (e: Exception) {
                    Log.w(TAG, "‚ùå Erro ao mostrar op√ß√µes de adiamento: ${e.message}")
                }
            }

            // Configurar bot√£o Conclu√≠do
            val completeButton = fullScreenView.findViewById<Button>(R.id.alert_complete_button)
            completeButton.setOnClickListener {
                try {
                    Log.d(TAG, "üîÑ Usu√°rio clicou no bot√£o Conclu√≠do")
                    windowManager.removeView(fullScreenView)
                    Log.d(TAG, "‚úÖ Alerta removido da tela - atividade conclu√≠da")
                    // TODO: Marcar atividade como conclu√≠da no reposit√≥rio
                } catch (e: Exception) {
                    Log.w(TAG, "‚ùå Erro ao remover alerta de tela inteira: ${e.message}")
                }
            }

            Log.d(TAG, "üéâ Alerta de visibilidade alta exibido com sucesso para: ${activity.title}")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao exibir alerta de visibilidade alta", e)
            // Fallback para notifica√ß√£o
            showFallbackNotification(activity, "Alerta Alto")
        }
    }

    /**
     * Notifica√ß√£o de fallback quando n√£o h√° permiss√£o de sobreposi√ß√£o
     */
    private fun showFallbackNotification(activity: Activity, alertType: String) {
        val notification = NotificationCompat.Builder(context, VISIBILITY_CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_alert)
            .setContentTitle("$alertType: ${activity.title}")
            .setContentText("${activity.description ?: "Sem descri√ß√£o"} - ${formatActivityTime(activity)}")
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setAutoCancel(true)
            .setVibrate(longArrayOf(0, 500, 200, 500))
            .build()

        notificationManager.notify(activity.id.hashCode(), notification)
        Log.d(TAG, "Notifica√ß√£o de fallback exibida para: ${activity.title}")
    }

    /**
     * Formata o hor√°rio da atividade para exibi√ß√£o
     */
    private fun formatActivityTime(activity: Activity): String {
        return if (activity.isAllDay) {
            "Dia inteiro"
        } else if (activity.startTime != null) {
            val formatter = DateTimeFormatter.ofPattern("HH:mm", Locale("pt", "BR"))
            "√Äs ${activity.startTime.format(formatter)}"
        } else {
            "Sem hor√°rio definido"
        }
    }

    /**
     * Exibe o di√°logo de op√ß√µes de adiamento
     */
    private fun showSnoozeOptionsDialog(activity: Activity, currentView: View) {
        try {
            Log.d(TAG, "üîÑ Exibindo di√°logo de op√ß√µes de adiamento para: ${activity.title}")
            
            // Inflar o layout do di√°logo
            val inflater = LayoutInflater.from(context)
            val dialogView = inflater.inflate(R.layout.snooze_options_dialog, null)
            
            // Configurar par√¢metros da janela para o di√°logo
            val layoutParams = WindowManager.LayoutParams().apply {
                width = WindowManager.LayoutParams.MATCH_PARENT
                height = WindowManager.LayoutParams.WRAP_CONTENT
                type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
                flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
                        WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL or
                        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                gravity = Gravity.CENTER
            }
            
            // Adicionar di√°logo √† tela
            windowManager.addView(dialogView, layoutParams)
            Log.d(TAG, "‚úÖ Di√°logo de adiamento adicionado √† tela")
            
            // Configurar bot√µes de adiamento
            val snooze5minButton = dialogView.findViewById<Button>(R.id.snooze_5min_button)
            val snooze30minButton = dialogView.findViewById<Button>(R.id.snooze_30min_button)
            val snooze1hourButton = dialogView.findViewById<Button>(R.id.snooze_1hour_button)
            val cancelButton = dialogView.findViewById<Button>(R.id.snooze_cancel_button)
            
            // Bot√£o 5 minutos
            snooze5minButton.setOnClickListener {
                Log.d(TAG, "üîÑ Usu√°rio escolheu adiar por 5 minutos")
                snoozeActivity(activity, 5, currentView, dialogView)
            }
            
            // Bot√£o 30 minutos
            snooze30minButton.setOnClickListener {
                Log.d(TAG, "üîÑ Usu√°rio escolheu adiar por 30 minutos")
                snoozeActivity(activity, 30, currentView, dialogView)
            }
            
            // Bot√£o 1 hora
            snooze1hourButton.setOnClickListener {
                Log.d(TAG, "üîÑ Usu√°rio escolheu adiar por 1 hora")
                snoozeActivity(activity, 60, currentView, dialogView)
            }
            
            // Bot√£o cancelar
            cancelButton.setOnClickListener {
                Log.d(TAG, "üîÑ Usu√°rio cancelou o adiamento")
                try {
                    windowManager.removeView(dialogView)
                    Log.d(TAG, "‚úÖ Di√°logo de adiamento removido")
                } catch (e: Exception) {
                    Log.w(TAG, "‚ùå Erro ao remover di√°logo de adiamento: ${e.message}")
                }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao exibir di√°logo de op√ß√µes de adiamento", e)
        }
    }

    /**
     * Adia a atividade pelo tempo especificado
     */
    private fun snoozeActivity(activity: Activity, minutes: Int, currentView: View, dialogView: View) {
        try {
            Log.d(TAG, "üîÑ Adiando atividade '${activity.title}' por $minutes minutos")
            
            // Remover o di√°logo e o alerta atual
            windowManager.removeView(dialogView)
            windowManager.removeView(currentView)
            Log.d(TAG, "‚úÖ Alertas removidos da tela")
            
            // Agendar nova notifica√ß√£o para o tempo de adiamento
            val notificationService = NotificationService(context)
            notificationService.scheduleSnoozedNotification(activity, minutes)
            
            Log.d(TAG, "‚úÖ Atividade adiada com sucesso por $minutes minutos")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao adiar atividade", e)
        }
    }
    
    /**
     * Fun√ß√£o de teste para verificar se o alerta de tela cheia est√° funcionando
     */
    fun testHighVisibilityAlert() {
        Log.d(TAG, "üß™ Testando alerta de visibilidade alta")
        
        val testActivity = Activity(
            id = "test",
            title = "TESTE - Alerta de Visibilidade Alta",
            description = "Este √© um teste para verificar se o alerta de tela cheia est√° funcionando",
            date = "2024-01-01",
            startTime = LocalTime.now(),
            endTime = null,
            isAllDay = false,
            location = null,
            categoryColor = "1",
            activityType = ActivityType.TASK,
            recurrenceRule = null,
            notificationSettings = NotificationSettings(),
            isCompleted = false,
            visibility = VisibilityLevel.HIGH,
            showInCalendar = true,
            isFromGoogle = false
        )
        
        showVisibilityAlert(testActivity)
    }
}
