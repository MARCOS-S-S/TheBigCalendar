package com.mss.thebigcalendar.service

import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.os.PowerManager
import android.util.Log
import android.view.WindowManager
import androidx.core.app.NotificationCompat
import com.mss.thebigcalendar.MainActivity
import com.mss.thebigcalendar.R
import com.mss.thebigcalendar.data.model.Activity
import com.mss.thebigcalendar.data.model.VisibilityLevel
import com.mss.thebigcalendar.ui.screens.HighVisibilityNotificationActivity

/**
 * ServiÃ§o para gerenciar notificaÃ§Ãµes de alta visibilidade
 * MantÃ©m o app ativo mesmo com a tela desligada atÃ© que o usuÃ¡rio veja a notificaÃ§Ã£o
 */
class HighVisibilityNotificationService : Service() {

    companion object {
        private const val TAG = "HighVisibilityNotificationService"
        private const val NOTIFICATION_ID = 1001
        private const val CHANNEL_ID = "high_visibility_notifications"
        private const val CHANNEL_NAME = "NotificaÃ§Ãµes de Alta Visibilidade"
        private const val CHANNEL_DESCRIPTION = "NotificaÃ§Ãµes importantes que mantÃªm o app ativo"
        
        // AÃ§Ãµes
        const val ACTION_SHOW_NOTIFICATION = "com.mss.thebigcalendar.SHOW_HIGH_VISIBILITY_NOTIFICATION"
        const val ACTION_DISMISS_NOTIFICATION = "com.mss.thebigcalendar.DISMISS_HIGH_VISIBILITY_NOTIFICATION"
        
        // Extras
        const val EXTRA_ACTIVITY_ID = "activity_id"
        const val EXTRA_ACTIVITY_TITLE = "activity_title"
        const val EXTRA_ACTIVITY_DESCRIPTION = "activity_description"
        const val EXTRA_ACTIVITY_DATE = "activity_date"
        const val EXTRA_ACTIVITY_TIME = "activity_time"
    }

    private var wakeLock: PowerManager.WakeLock? = null
    private var isNotificationActive = false
    private var currentActivity: Activity? = null

    override fun onCreate() {
        super.onCreate()
        createNotificationChannel()
        Log.d(TAG, "ðŸ”” HighVisibilityNotificationService criado")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "ðŸ”” onStartCommand chamado com action: ${intent?.action}")
        
        when (intent?.action) {
            ACTION_SHOW_NOTIFICATION -> {
                val activityId = intent.getStringExtra(EXTRA_ACTIVITY_ID)
                val activityTitle = intent.getStringExtra(EXTRA_ACTIVITY_TITLE)
                val activityDescription = intent.getStringExtra(EXTRA_ACTIVITY_DESCRIPTION)
                val activityDate = intent.getStringExtra(EXTRA_ACTIVITY_DATE)
                val activityTime = intent.getStringExtra(EXTRA_ACTIVITY_TIME)
                
                if (activityId != null && activityTitle != null) {
                    val activity = Activity(
                        id = activityId,
                        title = activityTitle,
                        description = activityDescription,
                        date = activityDate ?: "",
                        startTime = activityTime?.let { java.time.LocalTime.parse(it) },
                        endTime = null,
                        isAllDay = false,
                        location = null,
                        categoryColor = "#FF0000",
                        activityType = com.mss.thebigcalendar.data.model.ActivityType.TASK,
                        recurrenceRule = null,
                        notificationSettings = com.mss.thebigcalendar.data.model.NotificationSettings(
                            isEnabled = true,
                            notificationType = com.mss.thebigcalendar.data.model.NotificationType.BEFORE_ACTIVITY
                        ),
                        visibility = VisibilityLevel.HIGH,
                        showInCalendar = true,
                        isCompleted = false,
                        isFromGoogle = false
                    )
                    
                    showHighVisibilityNotification(activity)
                }
            }
            ACTION_DISMISS_NOTIFICATION -> {
                dismissNotification()
            }
        }
        
        return START_STICKY // ServiÃ§o deve ser reiniciado se for morto
    }

    override fun onBind(intent: Intent?): IBinder? = null

    /**
     * Exibe notificaÃ§Ã£o de alta visibilidade e mantÃ©m o app ativo
     */
    private fun showHighVisibilityNotification(activity: Activity) {
        Log.d(TAG, "ðŸ”” Exibindo notificaÃ§Ã£o de alta visibilidade para: ${activity.title}")
        
        currentActivity = activity
        isNotificationActive = true
        
        // Criar WakeLock para manter o dispositivo ativo
        acquireWakeLock()
        
        // Iniciar a Activity de notificaÃ§Ã£o de alta visibilidade
        startHighVisibilityActivity(activity)
        
        // Criar notificaÃ§Ã£o persistente para manter o serviÃ§o ativo
        createPersistentNotification(activity)
        
        Log.d(TAG, "ðŸ”” NotificaÃ§Ã£o de alta visibilidade ativada")
    }

    /**
     * Inicia a Activity de notificaÃ§Ã£o de alta visibilidade
     */
    private fun startHighVisibilityActivity(activity: Activity) {
        val intent = Intent(this, HighVisibilityNotificationActivity::class.java).apply {
            putExtra(EXTRA_ACTIVITY_ID, activity.id)
            putExtra(EXTRA_ACTIVITY_TITLE, activity.title)
            putExtra(EXTRA_ACTIVITY_DESCRIPTION, activity.description)
            putExtra(EXTRA_ACTIVITY_DATE, activity.date)
            putExtra(EXTRA_ACTIVITY_TIME, activity.startTime?.toString())
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        
        startActivity(intent)
        Log.d(TAG, "ðŸ”” Activity de alta visibilidade iniciada")
    }

    /**
     * Cria notificaÃ§Ã£o persistente para manter o serviÃ§o ativo
     */
    private fun createPersistentNotification(activity: Activity) {
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        
        // Intent para abrir o app principal
        val mainIntent = Intent(this, MainActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
        }
        
        val mainPendingIntent = PendingIntent.getActivity(
            this,
            0,
            mainIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // Intent para dismissar a notificaÃ§Ã£o
        val dismissIntent = Intent(this, HighVisibilityNotificationService::class.java).apply {
            action = ACTION_DISMISS_NOTIFICATION
        }
        
        val dismissPendingIntent = PendingIntent.getService(
            this,
            1,
            dismissIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_alert)
            .setContentTitle("ðŸ”” ${activity.title}")
            .setContentText("NotificaÃ§Ã£o de alta visibilidade ativa")
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setOngoing(true) // NotificaÃ§Ã£o persistente
            .setAutoCancel(false)
            .setContentIntent(mainPendingIntent)
            .addAction(
                android.R.drawable.ic_menu_close_clear_cancel,
                "Finalizar",
                dismissPendingIntent
            )
            .setVibrate(longArrayOf(0, 500, 200, 500, 200, 500))
            .setLights(0xFF0000FF.toInt(), 1000, 1000)
            .build()
        
        notificationManager.notify(NOTIFICATION_ID, notification)
        Log.d(TAG, "ðŸ”” NotificaÃ§Ã£o persistente criada")
    }

    /**
     * Adquire WakeLock suave para manter o app ativo sem forÃ§ar tela a ligar
     */
    private fun acquireWakeLock() {
        val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        
        // Usar PARTIAL_WAKE_LOCK sem ACQUIRE_CAUSES_WAKEUP para nÃ£o forÃ§ar tela a ligar
        wakeLock = powerManager.newWakeLock(
            PowerManager.PARTIAL_WAKE_LOCK,
            "TheBigCalendar:HighVisibilityNotification"
        )
        
        wakeLock?.acquire(10 * 60 * 1000L) // 10 minutos - tempo menor
        Log.d(TAG, "ðŸ”” WakeLock suave adquirido por 10 minutos")
    }

    /**
     * Libera WakeLock
     */
    private fun releaseWakeLock() {
        wakeLock?.let { lock ->
            if (lock.isHeld) {
                lock.release()
                Log.d(TAG, "ðŸ”” WakeLock liberado")
            }
        }
        wakeLock = null
    }

    /**
     * Dismissa a notificaÃ§Ã£o e para o serviÃ§o
     */
    private fun dismissNotification() {
        Log.d(TAG, "ðŸ”” Dismissando notificaÃ§Ã£o de alta visibilidade")
        
        isNotificationActive = false
        currentActivity = null
        
        // Cancelar notificaÃ§Ã£o persistente
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.cancel(NOTIFICATION_ID)
        
        // Liberar WakeLock
        releaseWakeLock()
        
        // Parar o serviÃ§o
        stopSelf()
        
        Log.d(TAG, "ðŸ”” NotificaÃ§Ã£o de alta visibilidade dismissada")
    }

    /**
     * Cria o canal de notificaÃ§Ã£o
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = android.app.NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = CHANNEL_DESCRIPTION
                enableVibration(true)
                enableLights(true)
                setShowBadge(true)
            }
            
            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "ðŸ”” HighVisibilityNotificationService destruÃ­do")
        
        // Liberar WakeLock se ainda estiver ativo
        releaseWakeLock()
        
        // Cancelar notificaÃ§Ã£o persistente
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.cancel(NOTIFICATION_ID)
    }
}
