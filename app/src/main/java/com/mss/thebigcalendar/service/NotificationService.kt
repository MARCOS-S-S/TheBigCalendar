package com.mss.thebigcalendar.service

import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import com.mss.thebigcalendar.data.model.Activity
import com.mss.thebigcalendar.data.model.NotificationType
import com.mss.thebigcalendar.data.model.VisibilityLevel
import java.time.LocalDateTime
import java.time.ZoneId

class NotificationService(private val context: Context) {

    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    private val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager

    companion object {
        private const val TAG = "NotificationService"
        const val CHANNEL_ID = "calendar_notifications"
        const val CHANNEL_NAME = "Lembretes do Calend√°rio"
        const val CHANNEL_DESCRIPTION = "Notifica√ß√µes para atividades e tarefas do calend√°rio"
        
        // A√ß√µes para as notifica√ß√µes
        const val ACTION_VIEW_ACTIVITY = "com.mss.thebigcalendar.VIEW_ACTIVITY"
        const val ACTION_SNOOZE = "com.mss.thebigcalendar.SNOOZE"
        const val ACTION_DISMISS = "com.mss.thebigcalendar.DISMISS"
        
        // Extras para as notifica√ß√µes
        const val EXTRA_ACTIVITY_ID = "activity_id"
        const val EXTRA_ACTIVITY_TITLE = "activity_title"
        const val EXTRA_ACTIVITY_DATE = "activity_date"
        const val EXTRA_ACTIVITY_TIME = "activity_time"
    }

    init {
        createNotificationChannel()
    }

    /**
     * Cria o canal de notifica√ß√£o (necess√°rio para Android 8.0+)
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = CHANNEL_DESCRIPTION
                enableVibration(true)
                enableLights(true)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }

    /**
     * Agenda uma notifica√ß√£o para uma atividade
     */
    fun scheduleNotification(activity: Activity) {
        if (!activity.notificationSettings.isEnabled || 
            activity.notificationSettings.notificationType == com.mss.thebigcalendar.data.model.NotificationType.NONE) {
            return
        }
        
        // Se n√£o h√° hor√°rio espec√≠fico, usar in√≠cio do dia (00:00)
        if (activity.startTime == null) {
        }

        val notificationTime = calculateNotificationTime(activity)
        val triggerTime = getTriggerTime(activity.date, notificationTime)
        
        // Log para debug
        Log.d(TAG, "üîî Agendando notifica√ß√£o para atividade: ${activity.title}")
        Log.d(TAG, "üìÖ Data da atividade: ${activity.date}")
        Log.d(TAG, "‚è∞ Hor√°rio da atividade: ${activity.startTime}")
        Log.d(TAG, "üîî Hor√°rio da notifica√ß√£o: $notificationTime")
        Log.d(TAG, "‚è∞ Trigger time (timestamp): $triggerTime")
        Log.d(TAG, "üîî Tipo de notifica√ß√£o: ${activity.notificationSettings.notificationType}")
        Log.d(TAG, "üîî Hor√°rio espec√≠fico configurado: ${activity.notificationSettings.notificationTime}")
        
        // Cancelar notifica√ß√£o anterior se existir
        cancelNotification(activity.id)
        
        // ‚úÖ Criar intent para exibir a notifica√ß√£o visual
        val intent = Intent(context, NotificationReceiver::class.java).apply {
            action = ACTION_VIEW_ACTIVITY
            putExtra(EXTRA_ACTIVITY_ID, activity.id)
            putExtra(EXTRA_ACTIVITY_TITLE, activity.title)
            putExtra(EXTRA_ACTIVITY_DATE, activity.date)
            putExtra(EXTRA_ACTIVITY_TIME, activity.startTime?.toString() ?: "")
        }

        val pendingIntent = PendingIntent.getBroadcast(
            context,
            activity.id.hashCode(),
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
        
        Log.d(TAG, "üîî PendingIntent criado com requestCode: ${activity.id.hashCode()}")

        // ‚úÖ Agendar o alarme para exibir a notifica√ß√£o visual
        Log.d(TAG, "‚è∞ Agendando alarme para timestamp: $triggerTime")
        Log.d(TAG, "‚è∞ Timestamp atual: ${System.currentTimeMillis()}")
        Log.d(TAG, "‚è∞ Diferen√ßa em minutos: ${(triggerTime - System.currentTimeMillis()) / (1000 * 60)}")
        
        // Verificar se o timestamp √© no futuro
        if (triggerTime <= System.currentTimeMillis()) {
            Log.w(TAG, "‚ö†Ô∏è ATEN√á√ÉO: Timestamp est√° no passado ou presente! N√£o agendando.")
            return
        }
        
        alarmManager.setExactAndAllowWhileIdle(
            AlarmManager.RTC_WAKEUP,
            triggerTime,
            pendingIntent
        )
        
        Log.d(TAG, "‚úÖ Alarme agendado com sucesso")
    }

    /**
     * Cancela uma notifica√ß√£o agendada
     */
    fun cancelNotification(activityId: String) {
        Log.d(TAG, "üîî Cancelando notifica√ß√£o para atividade: $activityId")
        val intent = Intent(context, NotificationReceiver::class.java)
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            activityId.hashCode(),
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
        alarmManager.cancel(pendingIntent)
        Log.d(TAG, "‚úÖ Notifica√ß√£o cancelada para atividade: $activityId")
    }

    /**
     * Calcula o hor√°rio da notifica√ß√£o baseado nas configura√ß√µes
     */
    private fun calculateNotificationTime(activity: Activity): LocalDateTime {
        val notificationType = activity.notificationSettings.notificationType
        
        // Se h√° um hor√°rio espec√≠fico de notifica√ß√£o configurado, usar ele
        if (activity.notificationSettings.notificationTime != null) {
            return LocalDateTime.parse("${activity.date}T${activity.notificationSettings.notificationTime}")
        }
        
        // Se n√£o h√° hor√°rio espec√≠fico de notifica√ß√£o, calcular baseado no tipo
        val activityDateTime = if (activity.startTime != null) {
            LocalDateTime.parse("${activity.date}T${activity.startTime}")
        } else {
            LocalDateTime.parse("${activity.date}T00:00")
        }
        
        return when (notificationType) {
            com.mss.thebigcalendar.data.model.NotificationType.NONE -> activityDateTime
            com.mss.thebigcalendar.data.model.NotificationType.BEFORE_ACTIVITY -> activityDateTime
            com.mss.thebigcalendar.data.model.NotificationType.CUSTOM -> {
                val customMinutes = activity.notificationSettings.customMinutesBefore ?: 15
                activityDateTime.minusMinutes(customMinutes.toLong())
            }
            else -> {
                val minutes = notificationType.minutesBefore ?: 15
                activityDateTime.minusMinutes(minutes.toLong())
            }
        }
    }

    /**
     * Converte LocalDateTime para timestamp do sistema
     */
    private fun getTriggerTime(date: String, notificationTime: LocalDateTime): Long {
        return notificationTime
            .atZone(ZoneId.systemDefault())
            .toInstant()
            .toEpochMilli()
    }

    /**
     * Mostra uma notifica√ß√£o imediatamente (para testes)
     */
    fun showNotification(activity: Activity) {
        // Verificar se precisa exibir alerta de visibilidade
        if (activity.visibility != VisibilityLevel.LOW) {
            // Usar VisibilityService para alertas especiais
            val visibilityService = VisibilityService(context)
            visibilityService.showVisibilityAlert(activity)
            return
        }
        
        // ‚úÖ Intent para abrir a MainActivity quando tocar na notifica√ß√£o
        val mainIntent = Intent(context, com.mss.thebigcalendar.MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
            putExtra("selected_activity_id", activity.id)
        }

        val pendingIntent = PendingIntent.getActivity(
            context,
            activity.id.hashCode(),
            mainIntent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle("üîî Lembrete: ${activity.title}")
            .setContentText(getNotificationText(activity))
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_REMINDER)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)
            .addAction(
                android.R.drawable.ic_menu_revert,
                "Adiar 5 min",
                createSnoozePendingIntent(activity, 5)
            )
            .addAction(
                android.R.drawable.ic_menu_close_clear_cancel,
                "Finalizado",
                createDismissPendingIntent(activity)
            )
            .setVibrate(longArrayOf(0, 500, 200, 500)) // ‚úÖ Adicionar vibra√ß√£o
            .setLights(0xFF0000FF.toInt(), 1000, 1000) // ‚úÖ Adicionar luz LED
            .build()

        notificationManager.notify(activity.id.hashCode(), notification)
    }

    /**
     * Gera o texto da notifica√ß√£o
     */
    private fun getNotificationText(activity: Activity): String {
        val timeText = if (activity.startTime != null) {
            " √†s ${String.format("%02d:%02d", activity.startTime.hour, activity.startTime.minute)}"
        } else {
            ""
        }
        
        return "Atividade programada para hoje$timeText"
    }

    /**
     * Cria intent para adiar notifica√ß√£o
     */
    private fun createSnoozePendingIntent(activity: Activity, minutes: Int): PendingIntent {
        val intent = Intent(context, NotificationReceiver::class.java).apply {
            action = ACTION_SNOOZE
            putExtra(EXTRA_ACTIVITY_ID, activity.id)
            putExtra("snooze_minutes", minutes)
        }
        
        return PendingIntent.getBroadcast(
            context,
            (activity.id + "_snooze").hashCode(),
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
    }

    /**
     * Cria intent para cancelar notifica√ß√£o
     */
    private fun createDismissPendingIntent(activity: Activity): PendingIntent {
        val intent = Intent(context, NotificationReceiver::class.java).apply {
            action = ACTION_DISMISS
            putExtra(EXTRA_ACTIVITY_ID, activity.id)
        }
        
        return PendingIntent.getBroadcast(
            context,
            (activity.id + "_dismiss").hashCode(),
            intent,
            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
        )
    }

    /**
     * Agenda uma notifica√ß√£o adiada para a atividade
     */
    fun scheduleSnoozedNotification(activity: Activity, minutes: Int) {
        try {
            // Calcular o hor√°rio de execu√ß√£o
            val now = java.time.LocalDateTime.now()
            val executionTime = now.plusMinutes(minutes.toLong())
            
            // Criar intent para a notifica√ß√£o adiada
            val intent = Intent(context, NotificationReceiver::class.java).apply {
                action = ACTION_VIEW_ACTIVITY
                putExtra(EXTRA_ACTIVITY_ID, activity.id)
                putExtra(EXTRA_ACTIVITY_TITLE, activity.title)
                putExtra(EXTRA_ACTIVITY_DATE, activity.date)
                putExtra(EXTRA_ACTIVITY_TIME, activity.startTime?.toString() ?: "")
            }
            
            // Criar PendingIntent √∫nico para o adiamento
            val pendingIntent = PendingIntent.getBroadcast(
                context,
                (activity.id + "_snooze_${minutes}min").hashCode(),
                intent,
                PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE
            )
            
            // Agendar o alarme
            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as android.app.AlarmManager
            
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                alarmManager.setExactAndAllowWhileIdle(
                    android.app.AlarmManager.RTC_WAKEUP,
                    executionTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli(),
                    pendingIntent
                )
            } else {
                alarmManager.setExact(
                    android.app.AlarmManager.RTC_WAKEUP,
                    executionTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli(),
                    pendingIntent
                )
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao agendar notifica√ß√£o adiada", e)
        }
    }
}
