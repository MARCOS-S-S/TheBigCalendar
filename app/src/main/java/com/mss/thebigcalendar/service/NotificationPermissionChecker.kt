package com.mss.thebigcalendar.service

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import androidx.core.content.ContextCompat

/**
 * Verificador de permissÃµes de notificaÃ§Ã£o
 */
class NotificationPermissionChecker(private val context: Context) {

    companion object {
        private const val TAG = "NotificationPermissionChecker"
    }

    /**
     * Verifica se as permissÃµes de notificaÃ§Ã£o estÃ£o concedidas
     */
    fun checkNotificationPermissions(): Boolean {
        Log.d(TAG, "ðŸ”” Verificando permissÃµes de notificaÃ§Ã£o")
        
        // Verificar permissÃ£o POST_NOTIFICATIONS (Android 13+)
        val hasPostNotificationPermission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            val permission = ContextCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            )
            Log.d(TAG, "ðŸ”” PermissÃ£o POST_NOTIFICATIONS: ${permission == PackageManager.PERMISSION_GRANTED}")
            permission == PackageManager.PERMISSION_GRANTED
        } else {
            Log.d(TAG, "ðŸ”” VersÃ£o Android < 13, permissÃ£o POST_NOTIFICATIONS nÃ£o necessÃ¡ria")
            true
        }

        // Verificar permissÃ£o SCHEDULE_EXACT_ALARM
        val hasScheduleExactAlarmPermission = ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.SCHEDULE_EXACT_ALARM
        ) == PackageManager.PERMISSION_GRANTED
        
        Log.d(TAG, "ðŸ”” PermissÃ£o SCHEDULE_EXACT_ALARM: $hasScheduleExactAlarmPermission")

        // Verificar permissÃ£o USE_EXACT_ALARM
        val hasUseExactAlarmPermission = ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.USE_EXACT_ALARM
        ) == PackageManager.PERMISSION_GRANTED
        
        Log.d(TAG, "ðŸ”” PermissÃ£o USE_EXACT_ALARM: $hasUseExactAlarmPermission")

        val allPermissionsGranted = hasPostNotificationPermission && 
                                   (hasScheduleExactAlarmPermission || hasUseExactAlarmPermission)
        
        Log.d(TAG, "ðŸ”” Todas as permissÃµes concedidas: $allPermissionsGranted")
        
        return allPermissionsGranted
    }

    /**
     * Verifica se o app tem permissÃ£o para mostrar notificaÃ§Ãµes
     */
    fun canShowNotifications(): Boolean {
        val hasPermission = checkNotificationPermissions()
        
        if (!hasPermission) {
            Log.w(TAG, "ðŸ”” PermissÃµes de notificaÃ§Ã£o nÃ£o concedidas!")
            return false
        }

        // Verificar se as notificaÃ§Ãµes estÃ£o habilitadas no sistema
        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as android.app.NotificationManager
        
        val areNotificationsEnabled = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            notificationManager.areNotificationsEnabled()
        } else {
            true // Para versÃµes anteriores, assumir que estÃ£o habilitadas
        }
        
        Log.d(TAG, "ðŸ”” NotificaÃ§Ãµes habilitadas no sistema: $areNotificationsEnabled")
        
        return areNotificationsEnabled
    }
}
